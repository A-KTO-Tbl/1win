from requests import post, get
from urllib.parse import unquote, parse_qs
from colorama import Fore
from datetime import datetime, timedelta
from threading import Thread, Lock
from typing import Literal
from random import randint
from os import system as sys
from platform import system as s_name
from time import sleep
from itertools import cycle
from re import search, sub
from json import loads

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *







class HPV_1win:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`
    
    [2] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`
    
    [3] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã`
    
    [4] - `–£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤`
    
    [5] - `–ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è`
    
    [6] - `1 —á–∞—Å –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è`
    
    [7] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤`
    
    [8] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 1-3 —á–∞—Å–∞`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict = None) -> None:
        INFO = self.URL_Clean(URL)
        self.Name = Name                     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.TG_ID = INFO['ID']              # ID –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = INFO['URL']               # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Domain = INFO['Domain']         # –î–æ–º–µ–Ω –∏–≥—Ä—ã
        self.Proxy = Proxy                   # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()           # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Token = self.Authentication()   # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞



    def URL_Clean(self, URL: str) -> dict:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            ID = str(loads(unquote(unquote(unquote(URL.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0]))).split('&')[1].split('user=')[1])['id'])
        except:
            ID = ''

        try:
            _URL = {KEY: VALUE[0] for KEY, VALUE in parse_qs(unquote(unquote(unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])))).items()}
        except:
            _URL = ''

        return {'ID': ID, 'URL': _URL, 'Domain': 'https://crypto-clicker-backend-go-prod.100hp.app/'}



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Authentication(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        URL = self.Domain + 'game/start'
        Headers = {'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'content-type': 'multipart/form-data; boundary=----WebKitFormBoundarya2JfBapJZfGJnj9A', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}

        try:
            Token = post(URL, headers=Headers, params=self.URL, proxies=self.Proxy).json()['token']
            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        self.Token = self.Authentication()



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ, –ø—Ä–∏–±—ã–ª–∏ –≤ —á–∞—Å –∏ —Å–∏–ª–µ –∫–ª–∏–∫–∞'''

        URL = self.Domain + 'user/balance'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()

            Balance = HPV['coinsBalance'] # –ë–∞–ª–∞–Ω—Å
            Hour_Profit = HPV['miningPerHour'] # –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å
            Click_Power = HPV['coinsPerClick'] # –°–∏–ª–∞ –∫–ª–∏–∫–∞

            return {'Balance': f'{Balance:,}', 'Hour_Profit': f'{Hour_Profit:,}', 'Click_Power': f'{Click_Power:,}'}
        except:
            return None



    def Run_Tasks(self) -> None:
        '''–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'''

        URL = self.Domain + 'tasks/subscription'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()

            if HPV['isCollected']:
                self.Logging('Success', self.Name, '‚ö°Ô∏è', f'–ó–∞–¥–∞–Ω–∏–µ —Å Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{HPV["money"]:,}')
                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def Referal_Claim(self) -> dict:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'''

        URL = self.Domain + 'friends/collect'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()['coinsCollected']

            return {'Status': True, 'Collected': f'{HPV:,}'} if HPV > 0 else {'Status': False}
        except:
            return {'Status': False}



    def Daily_Reward(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = self.Domain + 'tasks/everydayreward'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()['collectedCoins']

            Reward = {'1': 1_000, '2': 1_500, '3': 2_000, '4': 3_000, '5': 4_000, '6': 5_000, '7': 6_000, '8': 7_000, '9': 8_000, '10': 10_000, '11': 13_000, '12': 16_000, '13': 20_000, '14': 25_000, '15': 30_000, '16': 40_000, '17': 50_000, '18': 70_000, '19': 90_000, '20': 100_000, '21': 125_000, '22': 150_000, '23': 200_000, '24': 300_000}

            def Day(Coins):
                ALL = 0
                for _Day, _Reward in Reward.items():
                    ALL += _Reward
                    if ALL == Coins:
                        return _Day

            return {'Status': True, 'Collected': f'{Reward[Day(HPV)]:,}'}
        except:
            return {'Status': False}



    def Get_Cards(self) -> list:
        '''–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä–¥'''

        URL = 'https://cryptocklicker-frontend-rnd-prod.100hp.app/assets/clicker-config-v-3-BmW6CR9W.js'

        try:
            HPV = get(URL, proxies=self.Proxy).text.split('const e=[')[1].split('],i=[{id:')[0].split('{id:"')[1:]

            def Clean(ID: str) -> str:
                return sub(r'\d', '', ID) if search(r'\d', ID) else ID

            CARDS = []
            for Card in HPV:
                Card = Clean(Card.split('",name:"')[0])
                if Card not in CARDS:
                    CARDS.append(Card)

            return CARDS
        except:
            return []



    def Get_Card_ID(self, ID: str) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞—Ä—Ç–æ—á–µ–∫'''

        URL = self.Domain + 'minings'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()

            for CARD in HPV:
                if ID in CARD['id']:
                    return {'Status': True, 'Current': CARD['level'], 'New': f'{ID}{CARD["level"] + 1}'}

            return {'Status': True, 'Current': 0, 'New': f'{ID}1'}
        except:
            return {'Status': False}



    def Upgrade_Card(self, ID: str) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –∫–∞—Ä—Ç–æ—á–µ–∫'''

        URL = self.Domain + 'minings'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}
        Json = {'id': ID}

        try:
            post(URL, headers=Headers, json=Json, proxies=self.Proxy).json()['totalProfit']
            return True
        except:
            return False



    def Click(self) -> None:
        '''–°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–ø–æ–≤'''

        URL = self.Domain + 'tap'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}
        Json = {'tapsCount': randint(COINS[0], COINS[1])}

        try:
            post(URL, headers=Headers, json=Json, proxies=self.Proxy)
            self.Logging('Success', self.Name, 'üü¢', '–¢–∞–ø —Å–æ–≤–µ—Ä—à—ë–Ω!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–∞–ø–Ω—É—Ç—å!')



    def Get_Boosts(self) -> list:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç–æ–≤'''

        URL = self.Domain + 'energy/improvements'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}

        try:
            return [{'ID': Card['id'], 'LVL': Card['level']} for Card in get(URL, headers=Headers, proxies=self.Proxy).json()]
        except:
            return []



    def Update_Boosts(self, ID: str) -> bool:
        '''–∞–ø–¥–µ–π—Ç –±—É—Å—Ç–∞'''

        URL = self.Domain + 'energy/improvements'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'priority': 'u=1, i', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-user-id': self.TG_ID}
        Json = {'id': ID}

        try:
            post(URL, headers=Headers, json=Json, proxies=self.Proxy).json()['NextLevel']
            return True
        except:
            return False



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]} /// –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: {self.Get_Info()["Hour_Profit"]} /// –°–∏–ª–∞ –∫–ª–∏–∫–∞: {self.Get_Info()["Click_Power"]}')
                    self.Run_Tasks() # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏


                    # –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    Referal_Claim = self.Referal_Claim()
                    if Referal_Claim['Status']:
                        self.Logging('Success', self.Name, 'üü¢', f'–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω—ã! +{Referal_Claim["Collected"]}')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                    Daily_Reward = self.Daily_Reward()
                    if Daily_Reward['Status']:
                        self.Logging('Success', self.Name, 'üü¢', f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +{Daily_Reward["Collected"]}')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤
                    for Boost in self.Get_Boosts():
                        # –£–ª—É—á—à–µ–Ω–∏–µ `–ó–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏` –±—É—Å—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)
                        if 'energylimit' in Boost['ID'] and Boost['LVL'] < MAX_ENERGY_LIMIT:
                            if self.Update_Boosts(Boost['ID']):
                                self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `–ó–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏` —É–ª—É—á—à–µ–Ω!')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                        # –£–ª—É—á—à–µ–Ω–∏–µ `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏` –±—É—Å—Ç–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏)
                        if 'energyregen' in Boost['ID'] and Boost['LVL'] < MAX_ENERGY_REGEN:
                            if self.Update_Boosts(Boost['ID']):
                                self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏` —É–ª—É—á—à–µ–Ω!')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
                    Updates = {}
                    CARDS = self.Get_Cards()
                    while True:
                        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω—ã (–∏–ª–∏ –Ω–µ—Ç) –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
                        if all(Updates) and len(Updates) == len(CARDS): break

                        for CARD in CARDS:
                            CARD_ID = self.Get_Card_ID(CARD) 
                            if CARD_ID['Current'] < MAX_LVL:
                                if self.Upgrade_Card(CARD_ID['New']):
                                    self.Logging('Success', self.Name, 'üü¢', f'–ê–ø–≥—Ä–µ–π–¥ {CARD} —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {CARD_ID["New"][-1]}')
                                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                                else:
                                    Updates[CARD] = True
                            else:
                                Updates[CARD] = True


                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # 1 —á–∞—Å –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è
                    for _ in range(randint(550, 650)):
                        self.Click()
                        sleep(randint(4, 8)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    Waiting = randint(4_000, 11_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]} /// –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: {self.Get_Info()["Hour_Profit"]} /// –°–∏–ª–∞ –∫–ª–∏–∫–∞: {self.Get_Info()["Click_Power"]}')
                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        _1win = HPV_1win(Account, URL, Proxy)
        _1win.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    try:
        for Account, URL in HPV_Get_Accounts().items():
            if Proxy:
                Proxy = cycle(Proxy)
                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
            else:
                Thread(target=Start_Thread, args=(Account, URL,)).start()
    except:
        print(Fore.RED + '\n\t–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è `HPV_Account.json`, —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


